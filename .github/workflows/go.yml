name: 'Go Build and Tests'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY_IMAGE: helmunittest/helm-unittest
  GO_VERSION: 1.24.x

permissions:
  contents: read

jobs:
  full-test:
    name: Full SDK and Tools Test
    permissions:
      # Needed to upload the results to github dashboard.
      checks: write
      issues: write
      pull-requests: write
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # tests for target OS
        os: [ubuntu-24.04, macos-latest, windows-latest]
    steps:
    - name: Checkout
      # https://github.com/actions/checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Setup Go
      # https://github.com/actions/setup-go
      uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
      with:
        go-version: ${{ env.GO_VERSION }}

    # Install yq on windows machine
    - name: Install yq as part of test validation
      if: matrix.os == 'windows-latest'
      run: |
        choco install yq -y

    # Make results directory
    - name: Create test-result directory uploading testresults
      run: |
        mkdir -p test-results

    # Install using go install
    - name: Install JUnit plugin for uploading testresults
      if: github.ref_name == github.event.repository.default_branch
      run: |
        go install github.com/jstemmer/go-junit-report/v2@14d61e6e75e3f3c74551d757ad936e8e88014464 # v2.1.0

    # Run tests with nice formatting. Save the coverage and junit test results in test-results
    - name: Run tests with junit report
      if: github.ref_name == github.event.repository.default_branch
      run: |
        go test ./... -coverprofile=test-results/coverage -v -covermode=atomic 2>&1 | go-junit-report -set-exit-code > test-results/go-test-report.xml

    - name: Run tests on pull request
      if: github.ref_name != github.event.repository.default_branch
      run: |
        go test -cover -coverprofile=test-results/coverage -covermode=atomic -v ./...
        go tool cover -func=test-results/coverage

    - name: SonarCloud Scan
      # https://github.com/SonarSource/sonarqube-scan-action
      uses: SonarSource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602 # v6.0.0
      if: matrix.os == 'ubuntu-24.04' && env.SONAR_TOKEN != ''
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    # Upload the original go test log as an artifact for later review.
    - name: Upload Testlog
      # https://github.com/EnricoMi/publish-unit-test-result-action
      uses: EnricoMi/publish-unit-test-result-action@3a74b2957438d0b6e2e61d67b05318aa25c9e6c6 # v2.20.0
      if: always() && matrix.os == 'ubuntu-24.04' && github.ref_name == github.event.repository.default_branch
      with:
        files: |
          test-results/go-test-report.xml

  validate_docker:
    name: Build and Test Docker
    permissions:
      # Needed to upload the results to code-scanning dashboard.
      security-events: write
      # Needed to ensure the job is executed.
      statuses: write
    runs-on: ubuntu-24.04
    needs:
      - full-test
    steps:
    - name: Checkout
      # https://github.com/actions/checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 1

    - name: Setup go
      # https://github.com/actions/setup-go
      uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
      with:
        go-version: ${{ env.GO_VERSION }}

    # Run docker-tests
    - name: Build docker-test
      run: |
        make test-docker

    - name: Retrieve versions
      run: |
        helmPluginVersion=$(sed -n -e 's/version:[ "]*\([^"]*\).*/\1/p' plugin.yaml)
        echo "HELM_PLUGIN_VERSION=${helmPluginVersion}" >> $GITHUB_ENV

    # Run trivy security
    - name: Run Trivy vulnerability scanner
      # https://github.com/aquasecurity/trivy-action
      uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
      with:
        image-ref: ${{ env.REGISTRY_IMAGE }}:${{ env.HELM_PLUGIN_VERSION }}
        format: sarif
        output: trivy-results.sarif

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@4e94bd11f71e507f7f87df81788dff88d1dacbfb # v3.29.5
      if: always()
      with:
        sarif_file: trivy-results.sarif

